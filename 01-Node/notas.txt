

APP - CLIENTE
* HACE UNA PETICION (REQUEST) AL SERVER

SERVER
* EL SERVIDOR DEVUELVE UNA RESUETA A ESTA PETICION

las comunicacion de peticon y repuesta estan dadas bajo el protocolo HTTP, ese protocolo utiliza metodos GET - PUT - POST - DELATE

(obtener, modificar, crear, eliminar) informacion 

----------------------------------------------

.then() plan de accion cuando algo salio bien
.catch()plan de accion cuando algo salio mal


-----------------------------------------------

//ARQUITECTURA NODE JS

nose js sirve para levantar un servidor 

node es un entorno de ejecucion de javascrirpt 

// node js: solo interpreta javasecript y es un contexto de ejecucion que permite leer javascript fuera de un navegador. este programa esta escrito en C++




// Libuv: Esta es una librería para **Node** que le va a permitir poder organizar el código para que sea reusable, y también poder leer y escribir archivos. Además es el encargado de enviar y recibir archivos por internet e interpretar los formatos estándares.

// modulos: CommonJS Modules es un estándar que nos va a permitir conectar estos diferentes módulos entre sí. Es importante entender que cada uno de nuestros módulos van a estar alojados en un archivo único. La forma de conectar los distintos módulos es mediante la importación y exportación.

// exportacion
const nombre = "Alejo";
const apellido = "Bengoechea";

module.exports = { nombre, apellido };

//importacion
// const data = require('./Nombres.js);

// console.log('Hola data.nombre')
// //Hola Alejo

// npm: es una libreria y un  gestor de paquetes hacen el trabajo de comunicación entre nuestros proyectos y los módulos particulares. Por ejemplo, cuando descargamos react, redux, babel, webpack, etc... lo estamos haciendo desde una librería online (en nuestro caso, la librería de npm).

// Package.json: Cuando hacemos un nuevo proyecto debemos crear un package.json, el cual se hace con el comando npm init. Este archivo sirve para tener definida la información del proyecto, un listado de sus dependencias y una serie de comandos útiles para correr.

pasos para crear package.json

1. npm init -y en la consola 

// 1
// Información: En la primera sección del archivo tenemos una estructura en la que se escribe la siguiente información:

"name": "Weather App",  //----------------------------> Nombre del proyecto.
"version": "1.0.0",     //----------------------------> Versión del proyecto.
"description": "Bla",   //----------------------------> Descripción del proyecto.
  "main": "index.js",     //----------------------------> Archivo principal del proyecto

    //2
    // Scripts:  En la segunda parte del archivo tendremos los “scripts”. Estos serán los comandos que configuremos para que realicen ciertas acciones en nuestro proyecto.
    
    "scripts": {
    "test": "testing"
		"start": "node index.js"
		"build": ...
},
  
//3
// Dependencies: Las dependencias van a ser todos aquellos paquetes que descarguemos desde npm con el comando npm install + NombreDelPaquete. Por ejemplo, npm install react. Cuando realizamos esto, automáticamente en nuestro package.json se escribirá la dependencia con su versión.

"dependencies": {
    "@testing-library/jest-dom": "^4.2.4",
    "@testing-library/react": "^9.3.2",
    "@testing-library/user-event": "^7.1.2",
    "enzyme": "^3.11.0",
    "enzyme-adapter-react-16": "^1.15.4",
    "jest-junit": "^12.2.0",
    "react": "^16.13.1",
    "react-dom": "^16.13.1",
    "react-redux": "^7.2.1",
    "react-router-dom": "^5.2.0",
    "react-scripts": "3.4.3",
    "redux": "^4.0.5",
    "axios": "^0.21.1"
},
  
// Este es un ejemplo. Una vez que ya hayamos definido en el archivo cuáles serán las dependencias que usaremos, vamos a correr el comando npm install, y de esta manera se instalaran definitivamente todos estos paquetes. La instalación se producirá en una carpeta llamada node_modules.



- **Nodemon**
    
    Este es un paquete que podemos descargar desde **npm** con ***npm install nodemon***. Lo que nos permitirá este paquete es poder mantener la terminal en modo *watcher*. De esta forma, cuando realicemos cambios dentro de nuestro proyecto podremos verlos reflejados sin tener que reiniciar el programa.
    